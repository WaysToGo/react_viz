{"version":3,"sources":["store/api/index.js","store/actions.js","store/sagas/ApiErrors.js","store/sagas/Metrics.js","store/sagas/index.js","store/reducers/Weather.js","store/reducers/metricsReducer.js","components/Wrapper.js","components/Chip.js","components/Weather.js","components/Header.js","components/metricComponents/MetricCheckBox.js","components/chart/Chart.js","components/metricComponents/MetricCard.js","components/CardSection.js","components/graphContainer/GraphContainer.js","App.js","store/index.js","serviceWorker.js","index.js"],"names":["httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","_ref","query","definition","getMainDefinition","kind","operation","cache","InMemoryCache","client","ApolloClient","subscribeLive","_ref2","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","subscribe","gql","_templateObject","abrupt","sent","stop","apply","this","arguments","FetchLast30minData","_ref3","_callee2","metric","last30mints","_context2","Date","getTime","_templateObject2","_x","api","API_ERROR","METRICS_RECEIVED","GET_LAST_THIRTY_MINS_DATA","METRICS_RECEIVED_MULTI","TRIGGER_LIVE_UPDATES","apiErrorReceived","watchApiError","action","call","toast","error","concat","_marked","takeEvery","actions","_marked2","ApiErrors","formatData","processData","triggerLiveUpdate","fetchLast30minData","watch","getMetrics","metrics","dataList","data","select","map","item","_objectSpread2","at","value","_objectSpread","defineProperty","put","type","Metrics_marked","newData","_objectSpread4","lastLatestValue","latestValue","state","Metrics_marked2","createChannel","sub","eventChannel","emit","unsubscribe","subscription","_context3","take","fork","newMeasurement","_marked3","_context4","metricName","getMeasurements","_marked4","_context5","_marked5","Metrics","sagas","toConsumableArray","metricsSaga","initialState","temperatureinCelsius","temperatureinFahrenheit","description","locationName","handlers","c","getWeatherForLocation","reducers_Weather","length","undefined","handler","_handlers","metricsReducer_objectSpread","metricsReducer","useStyles","makeStyles","theme","wrapper","backgroundImage","color","height","Wrapper","children","classes","react_default","createElement","className","withStyles","root","background","palette","secondary","main","label","primary","Chip","createClient","url","getWeather","_state$weather","weather","components_Weather","urql_es","Weather_Weather","Weather","getLocation","useGeolocation","latLong","latitude","longitude","dispatch","useDispatch","_useSelector","useSelector","_useQuery","useQuery","variables","result","slicedToArray","fetching","useEffect","message","LinearProgress","components_Chip","grow","flexGrow","Header","AppBar","position","Toolbar","Typography","variant","GET_METRICS","MetricCheckBox_templateObject","MetricCheckBox","selected","handleOnChange","selectedValue","setSelected","_this","props","newSelected","isMetricSelected","filter","eachSelected","setState","isSelected","forEach","_this2","react_components_esm","loading","Fragment","FormGroup","row","option","FormControlLabel","key","control","Checkbox","checked","onChange","toUpperCase","React","Component","colors","red","pink","purple","teal","green","indigo","getData","keys","Chart","selectedMetrics","getYAxisID","axes","es6","width","index","dot","activeDot","yAxisId","dataKey","stroke","strokeWidth","tickFormatter","d3","percentage","offset","fill","dy","dx","angle","orientation","domain","ticks","tick","fontSize","pressure","temp","card","title","MetricCard","Grid","md","lg","Card","elevation","CardContent","currentValue","connect","s","padding","spacing","chartContainer","startLiveUpdates","getPastData","objectWithoutProperties","_React$useState","useState","_React$useState2","setVisible","_React$useState3","_React$useState4","setSelectedMetrics","entries","toLowerCase","endsWith","container","xs","metricComponents_MetricCheckBox","metricSelected","some","m","valueGrid","components_CardSection","justify","alignItems","chart_Chart","store","rootReducer","combineReducers","weatherReducer","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","createStore","run","createMuiTheme","typography","useNextVariants","App","MuiThemeProvider","CssBaseline","react_common_esm","es","lib","graphContainer_GraphContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","style","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6423d7d.chunk.js","sourcesContent":["import { ApolloClient } from 'apollo-client'\nimport { getMainDefinition } from 'apollo-utilities'\nimport { HttpLink } from 'apollo-link-http'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport gql from 'graphql-tag'\nimport { split } from 'apollo-link'\n\nconst URL = 'https://react.eogresources.com/graphql'\n\nconst httpLink = new HttpLink({\n    uri: URL,\n})\n\nconst wsLink = new WebSocketLink({\n    uri: `ws://react.eogresources.com/graphql`,\n    options: {\n        reconnect: true,\n    },\n})\n\nconst link = split(\n    ({ query }) => {\n        const definition = getMainDefinition(query)\n        return (\n            definition.kind === 'OperationDefinition' &&\n            definition.operation === 'subscription'\n        )\n    },\n    wsLink,\n    httpLink\n)\n\nconst cache = new InMemoryCache()\n\nconst client = new ApolloClient({\n    cache,\n    link,\n})\n\nconst subscribeLive = async () =>\n    await client.subscribe({\n        query: gql`\n            subscription {\n                newMeasurement {\n                    at\n                    metric\n                    value\n                    unit\n                }\n            }\n        `,\n    })\n\nconst FetchLast30minData = async metric => {\n    const last30mints = new Date(new Date().getTime() - 30 * 60000).getTime()\n    return await client.query({\n        query: gql`\n      {\n        getMeasurements(\n          input: {\n            metricName: \"${metric}\"\n            after: ${last30mints}\n          }\n        ) {\n          at\n          metric\n          value\n          unit\n        }\n      }\n    `,\n    })\n}\n\nexport default { client, subscribeLive, FetchLast30minData }\n","export const API_ERROR = \"EVENT/API_ERROR_RECEIVED\";\nexport const WEATHER_DATA_RECEIVED = \"EVENT/WEATHER_DATA_RECEIVED\";\nexport const METRICS_RECEIVED = 'METRICS_RECEIVED'\nexport const GET_LAST_THIRTY_MINS_DATA = 'GET_LAST_THIRTY_MINS_DATA'\nexport const METRICS_RECEIVED_MULTI = 'METRICS_RECEIVED_MULTI'\nexport const TRIGGER_LIVE_UPDATES = 'TRIGGER_LIVE_UPDATES'\n","import { takeEvery, call } from \"redux-saga/effects\";\nimport * as actions from \"../actions\";\nimport { toast } from \"react-toastify\";\n\nfunction* apiErrorReceived(action) {\n  yield call(toast.error, `Error Received: ${action.error}`);\n}\n\nfunction* watchApiError() {\n  yield takeEvery(actions.API_ERROR, apiErrorReceived);\n}\n\nexport default [watchApiError];\n","import { takeEvery, take, call, put, fork, select } from 'redux-saga/effects'\nimport * as actions from '../actions'\nimport api from '../api'\nimport { eventChannel } from 'redux-saga'\n\nconst getMetrics = ({ metrics: { metrics } }) => metrics\n\nfunction* formatData(dataList) {\n    let data = yield select(getMetrics)\n    dataList.map(item => {\n        const { metric, at, value } = item\n        data = {\n            ...data,\n            [at]: {\n                ...data[at],\n                [metric]: value,\n                at,\n            },\n        }\n        return null\n    })\n    yield put({ type: actions.METRICS_RECEIVED_MULTI, metrics: data })\n}\n\nfunction* processData(newData) {\n    const { metric, at, value } = newData\n    let data = yield select(getMetrics)\n    const lastLatestValue = yield select(state => state.metrics.latestValue)\n\n    data = {\n        ...data,\n        [at]: {\n            ...data[at],\n            [metric]: value,\n            at,\n        },\n    }\n    const latestValue = {\n        ...lastLatestValue,\n        [metric]: value,\n    }\n    yield put({ type: actions.METRICS_RECEIVED, metrics: data, latestValue })\n}\n\nconst createChannel = sub =>\n    eventChannel(emit => {\n        const handler = data => {\n            emit(data)\n        }\n        sub.subscribe(handler)\n        return () => {\n            sub.unsubscribe()\n        }\n    })\n\nfunction* triggerLiveUpdate() {\n    const sub = yield call(api.subscribeLive)\n    const subscription = yield call(createChannel, sub)\n    while (true) {\n        const { data } = yield take(subscription)\n        yield fork(processData, data.newMeasurement)\n    }\n}\n\nfunction* fetchLast30minData(action) {\n    const { data } = yield call(api.FetchLast30minData, action.metricName)\n    const newData = data.getMeasurements\n    yield fork(formatData, newData)\n}\n\nfunction* watch() {\n    yield takeEvery(actions.GET_LAST_THIRTY_MINS_DATA, fetchLast30minData)\n    yield takeEvery(actions.TRIGGER_LIVE_UPDATES, triggerLiveUpdate)\n\n}\n\nexport default [watch]\n","import ApiErrors from './ApiErrors'\nimport metricsSaga from './Metrics'\n\nexport default [...ApiErrors, ...metricsSaga]\n","import * as actions from \"../actions\";\n\nconst initialState = {\n  temperatureinCelsius: null,\n  temperatureinFahrenheit: null,\n  description: \"\",\n  locationName: \"\"\n};\n\nconst toF = c => (c * 9) / 5 + 32;\n\nconst weatherDataRecevied = (state, action) => {\n  const { getWeatherForLocation } = action;\n  const {\n    description,\n    locationName,\n    temperatureinCelsius\n  } = getWeatherForLocation;\n\n  return {\n    temperatureinCelsius,\n    temperatureinFahrenheit: toF(temperatureinCelsius),\n    description,\n    locationName\n  };\n};\n\nconst handlers = {\n  [actions.WEATHER_DATA_RECEIVED]: weatherDataRecevied\n};\n\nexport default (state = initialState, action) => {\n  const handler = handlers[action.type];\n  if (typeof handler === \"undefined\") return state;\n  return handler(state, action);\n};\n","import * as actions from '../actions'\n\nconst initialState = {\n    metrics: {},\n    latestValue: {},\n}\n\nconst multipleMetricsReceived = (state, action) => {\n    const data = action.metrics\n    return {\n        ...state,\n        metrics: data,\n    }\n}\n\nconst metricsReceived = (state, action) => {\n    const { metrics, latestValue } = action\n    return {\n        ...state,\n        metrics,\n        latestValue,\n    }\n}\n\nconst handlers = {\n    [actions.METRICS_RECEIVED]: metricsReceived,\n    [actions.METRICS_RECEIVED_MULTI]: multipleMetricsReceived,\n}\n\nexport default (state = initialState, action) => {\n    const handler = handlers[action.type]\n    if (typeof handler === 'undefined') return state\n    return handler(state, action)\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => ({\n  wrapper: {\n    backgroundImage: \"linear-gradient(#2a3265, #1e234d)\",\n    color: \"#fff\",\n    height: \"100vh\"\n  }\n}));\n\nexport default ({ children }) => {\n  const classes = useStyles();\n  return <div className={classes.wrapper} >{children}</div>;\n};\n","import Chip from \"@material-ui/core/Chip\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst cardStyles = theme => ({\n  root: {\n    background: theme.palette.secondary.main\n  },\n  label: {\n    color: theme.palette.primary.main\n  }\n});\nexport default withStyles(cardStyles)(Chip);\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../store/actions\";\nimport { Provider, createClient, useQuery } from \"urql\";\nimport { useGeolocation } from \"react-use\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Chip from \"./Chip\";\n\nconst client = createClient({\n  url: \"https://react.eogresources.com/graphql\"\n});\n\nconst query = `\nquery($latLong: WeatherQuery!) {\n  getWeatherForLocation(latLong: $latLong) {\n    description\n    locationName\n    temperatureinCelsius\n  }\n}\n`;\n\nconst getWeather = state => {\n  const { temperatureinFahrenheit, description, locationName } = state.weather;\n  return {\n    temperatureinFahrenheit,\n    description,\n    locationName\n  };\n};\n\nexport default () => {\n  return (\n    <Provider value={client}>\n      <Weather />\n    </Provider>\n  );\n};\n\nconst Weather = () => {\n  const getLocation = useGeolocation();\n  // Default to houston\n  const latLong = {\n    latitude: getLocation.latitude || 29.7604,\n    longitude: getLocation.longitude || -95.3698\n  };\n  const dispatch = useDispatch();\n  const { temperatureinFahrenheit, description, locationName } = useSelector(\n    getWeather\n  );\n\n  const [result] = useQuery({\n    query,\n    variables: {\n      latLong\n    }\n  });\n  const { fetching, data, error } = result;\n  useEffect(\n    () => {\n      if (error) {\n        dispatch({ type: actions.API_ERROR, error: error.message });\n        return;\n      }\n      if (!data) return;\n      const { getWeatherForLocation } = data;\n      dispatch({ type: actions.WEATHER_DATA_RECEIVED, getWeatherForLocation });\n    },\n    [dispatch, data, error]\n  );\n\n  if (fetching) return <LinearProgress />;\n\n  return (\n    <Chip\n      label={`Weather in ${locationName}: ${description} and ${temperatureinFahrenheit}°`}\n    />\n  );\n};\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Weather from './Weather'\n\nconst useStyles = makeStyles({\n    grow: {\n        flexGrow: 1,\n    },\n})\n\nexport default () => {\n    const classes = useStyles()\n\n    const name = \"Vinay's\"\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography\n                    variant=\"h6\"\n                    color=\"inherit\"\n                    className={classes.grow}\n                >\n                    {name} EOG React Visualization Assessment\n                </Typography>\n                <Weather />\n            </Toolbar>\n        </AppBar>\n    )\n}\n","import React from 'react'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport { Checkbox, FormGroup, FormControlLabel } from '@material-ui/core'\nconst GET_METRICS = gql`\n    query {\n        getMetrics\n    }\n`\n\nclass MetricCheckBox extends React.Component {\n    state = {\n        selected: [],\n    }\n\n    handleOnChange = selectedValue => {\n        const { setSelected } = this.props\n        const { selected } = this.state\n        const { value } = selectedValue\n        let newSelected = []\n\n        if (this.isMetricSelected(value)) {\n            newSelected = selected.filter(\n                eachSelected => eachSelected.value !== value\n            )\n        } else {\n            newSelected = [...selected, selectedValue]\n        }\n\n        setSelected(() => newSelected.map(eachSelected => eachSelected.value))\n\n        this.setState({\n            selected: newSelected,\n        })\n    }\n\n    isMetricSelected = metric => {\n        const { selected } = this.state\n        let isSelected = false\n        selected.forEach(eachSelected => {\n            if (eachSelected.value === metric) {\n                isSelected = true\n            }\n        })\n\n        return isSelected\n    }\n\n    render() {\n        return (\n            <Query query={GET_METRICS}>\n                {({ loading, error, data }) => {\n                    if (loading) return 'Loading...'\n                    if (error) return `Error! ${error.message}`\n                    const options = data.getMetrics.map(metric => ({\n                        value: metric,\n                        label: metric,\n                    }))\n\n                    return (\n                        <>\n                            <h3>Select Metrics: </h3>\n                            <FormGroup row>\n                                {options.map(option => {\n                                    const { value, label } = option\n                                    return (\n                                        <FormControlLabel\n                                            key={label}\n                                            control={\n                                                <Checkbox\n                                                    checked={this.isMetricSelected(\n                                                        value\n                                                    )}\n                                                    onChange={() =>\n                                                        this.handleOnChange(\n                                                            option\n                                                        )\n                                                    }\n                                                    value={value}\n                                                />\n                                            }\n                                            label={label.toUpperCase()}\n                                        />\n                                    )\n                                })}\n                            </FormGroup>\n                        </>\n                    )\n                }}\n            </Query>\n        )\n    }\n}\n\nexport default MetricCheckBox\n","import React from 'react'\nimport {\n    XAxis,\n    YAxis,\n    LineChart,\n    Line,\n    Tooltip,\n    ResponsiveContainer,\n} from 'recharts'\nimport {\n    indigo,\n    purple,\n    teal,\n    red,\n    pink,\n    green,\n} from '@material-ui/core/colors'\nimport { useSelector } from 'react-redux'\nimport * as d3 from \"d3-time-format\"\n\n\nconst colors = [\n    red[500],\n    pink[500],\n    purple[500],\n    teal[500],\n    green[500],\n    indigo[500],\n]\n\n\nconst getData = state => {\n    const { metrics } = state.metrics;\n    const plot = Object.keys(metrics).map(key => metrics[key])\n    return {\n        data: plot,\n    }\n}\n\nconst Chart = ({ selectedMetrics, getYAxisID, axes }) => {\n    const { data } = useSelector(\n        getData\n    )\n    return (<ResponsiveContainer >\n        <LineChart width={800} height={500} data={data}>\n            {selectedMetrics.map((metric, index) => (\n                <Line\n                    key={index}\n                    dot={false}\n                    activeDot={false}\n                    yAxisId={getYAxisID(metric)}\n                    dataKey={metric}\n                    stroke={colors[index]}\n                />\n            ))}\n\n            {selectedMetrics.length > 0 && (\n                <XAxis dataKey=\"at\" strokeWidth={1} tickFormatter={d3.timeFormat('%I:%M')} />\n            )}\n            {axes.percentage && (\n                <YAxis\n                    label={{\n                        value: '%',\n                        position: 'insideTopLeft',\n                        offset: 0,\n                        fill: '#908e8e',\n                        dy: 10,\n                        dx: 10,\n                        angle: -90,\n                    }}\n                    yAxisId={0}\n                    orientation=\"left\"\n                    stroke={'#908e8e'}\n                    domain={[0, 100]}\n                    ticks={[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]}\n                    tick={{ fontSize: 12 }}\n                />\n            )}\n            {axes.pressure && (\n                <YAxis\n                    label={{\n                        value: 'PSI',\n                        position: 'insideTopLeft',\n                        offset: 0,\n                        fill: '#908e8e',\n                        fontSize: 12,\n                        dy: 15,\n                        dx: 10,\n                        angle: -90,\n                    }}\n                    yAxisId={1}\n                    orientation=\"left\"\n                    stroke={'#908e8e'}\n                    tick={{ fontSize: 12 }}\n                />\n            )}\n            {axes.temp && (\n                <YAxis\n                    label={{\n                        value: 'F',\n                        position: 'insideTopLeft',\n                        offset: 0,\n                        fill: '#908e8e',\n                        fontSize: 12,\n                        dy: 10,\n                        dx: 10,\n                        angle: -90,\n                    }}\n                    yAxisId={2}\n                    orientation=\"left\"\n                    stroke={'#908e8e'}\n                    tick={{ fontSize: 12 }}\n                />\n            )}\n            }\n            <Tooltip />\n        </LineChart>\n    </ResponsiveContainer>)\n}\n\n\nexport default Chart\n","import React from 'react'\nimport { Grid, CardContent, Typography, Card, makeStyles } from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        background: \"#171C43\",\n        color: \"#5c69c5\"\n    },\n    title: {\n        color: \"#fff\"\n    }\n}));\nexport default props => {\n    const classes = useStyles();\n\n    return (<Grid item md={3} lg={2} >\n        <Card elevation={1}>\n            <CardContent className={classes.card}>\n                <Typography variant=\"h6\">{props.title.toUpperCase()}</Typography>\n                <Typography className={classes.title} variant=\"h5\">{props.currentValue}</Typography>\n            </CardContent>\n        </Card>\n    </Grid>)\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport MetricCard from './metricComponents/MetricCard'\n\nconst CardSection = ({ selectedMetrics, latestValue }) => {\n    return (\n        <React.Fragment>\n            {selectedMetrics.map((s, key) => (\n                <MetricCard key={key} currentValue={latestValue[s]} title={s} />\n            ))}\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = ({ metrics: { latestValue } }) => ({\n    latestValue,\n})\n\nexport default connect(mapStateToProps)(CardSection)\n","import React from 'react'\nimport { Grid, makeStyles } from '@material-ui/core'\nimport * as actions from '../../store/actions'\nimport MetricCheckBox from '../metricComponents/MetricCheckBox'\nimport Chart from '../chart/Chart'\nimport { connect } from 'react-redux'\nimport CardSection from '../CardSection'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(4),\n    },\n    chartContainer: {\n        width: '100vw',\n        height: '500px',\n    },\n}))\n\nconst GraphContainer = ({\n    startLiveUpdates,\n    getPastData,\n    latestValue,\n    metrics,\n    ...props\n}) => {\n    const classes = useStyles(props)\n    const [axes, setVisible] = React.useState({\n        pressure: false,\n        temp: false,\n        percentage: false,\n    })\n    const [selectedMetrics, setSelectedMetrics] = React.useState([])\n    React.useEffect(() => {\n        let triggerLiveUpdate = false\n        Object.entries(axes).forEach(\n            ([value]) => {\n                if (value) {\n                    triggerLiveUpdate = true;\n                }\n            }\n        );\n        if (triggerLiveUpdate) {\n            startLiveUpdates()\n        }\n    }, [axes, startLiveUpdates])\n    const getYAxisID = metric => {\n        if (metric.toLowerCase().endsWith('pressure')) {\n            return 1\n        } else if (metric.toLowerCase().endsWith('temp')) {\n            return 2\n        } else {\n            return 0\n        }\n    }\n    const handleSelect = selected => {\n        const metricSelected = selected()\n        if (selectedMetrics.length < metricSelected.length) {\n            getPastData(metricSelected[metricSelected.length - 1])\n        }\n        setVisible({\n            pressure: metricSelected.some(m => getYAxisID(m) === 1),\n            temp: metricSelected.some(m => getYAxisID(m) === 2),\n            percentage: metricSelected.some(m => getYAxisID(m) === 0),\n        })\n        setSelectedMetrics(selected)\n    }\n    return (\n\n        <main className={classes.root}>\n            <Grid container>\n                <Grid container item xs={12} spacing={4}>\n                    <Grid item xs={12} md={12} lg={12}>\n                        <MetricCheckBox\n                            setSelected={handleSelect}\n                            selectedMetrics={selectedMetrics}\n                        />\n                    </Grid>\n                    <Grid\n                        item\n                        container\n                        spacing={2}\n                        className={classes.valueGrid}\n                    >\n                        <Grid item lg={12} md={7} xs={12}>\n                            <Grid container spacing={2}>\n                                <CardSection\n                                    selectedMetrics={selectedMetrics}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    <Grid\n                        className={classes.chartContainer}\n                        item\n                        container\n                        xs={12}\n                        justify=\"center\"\n                        alignItems=\"center\"\n                    >\n                        <Chart\n                            selectedMetrics={selectedMetrics}\n                            getYAxisID={getYAxisID}\n                            axes={axes}\n                        />\n                    </Grid>\n                </Grid>\n            </Grid>\n        </main>\n    )\n}\n\nconst mapDispatch = dispatch => ({\n    startLiveUpdates: () => {\n        dispatch({\n            type: actions.TRIGGER_LIVE_UPDATES,\n        })\n    },\n    getPastData: metricName => {\n        dispatch({\n            type: actions.GET_LAST_THIRTY_MINS_DATA,\n            metricName,\n        })\n    },\n})\n\nexport default connect(\n    () => ({}),\n    mapDispatch\n)(GraphContainer)\n","import React from 'react'\n\nimport { Provider } from 'react-redux'\nimport { ToastContainer } from 'react-toastify'\nimport { ApolloProvider } from 'react-apollo'\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline'\n\nimport api from './store/api'\nimport createStore from './store'\n\nimport 'react-toastify/dist/ReactToastify.css'\nimport Wrapper from './components/Wrapper'\nimport Header from './components/Header'\nimport GraphContainer from './components/graphContainer/GraphContainer'\n\nconst { client } = api\nconst store = createStore()\nconst theme = createMuiTheme({\n    typography: {\n        useNextVariants: true,\n    },\n    palette: {\n        primary: {\n            main: 'rgb(39,49,66)',\n        },\n        secondary: {\n            main: 'rgb(197,208,222)',\n        },\n        background: {\n            // main: 'rgb(226,231,238)',\n            main: '#0f273d',\n        },\n    },\n})\n\nconst App = props => (\n    <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <ApolloProvider client={client}>\n            <Provider store={store}>\n                <Wrapper >\n                    <Header />\n                    <ToastContainer />\n                    <GraphContainer />\n                </Wrapper>\n            </Provider>\n        </ApolloProvider>\n    </MuiThemeProvider>\n)\n\nexport default App\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport sagas from \"./sagas\";\nimport weatherReducer from \"./reducers/Weather\";\nimport metricsReducer from \"./reducers/metricsReducer\";\n\nexport default () => {\n  const rootReducer = combineReducers({\n    weather: weatherReducer,\n    metrics: metricsReducer,\n  });\n\n  const composeEnhancers = composeWithDevTools({});\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = applyMiddleware(sagaMiddleware);\n  const store = createStore(rootReducer, composeEnhancers(middlewares));\n\n  sagas.forEach(sagaMiddleware.run);\n\n  return store;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App style={{ background: \"#0f273d\" }} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}